name: AWS Planetiler

on:
  workflow_dispatch

jobs:
  aws-planetiler:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
  
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Create instance
        run: |
          aws ec2 run-instances --image-id ${{ secrets.AWS_IMAGE_ID }} --count 1 \
            --instance-type ${{ secrets.AWS_INSTANCE_TYPE }} --key-name ${{ secrets.AWS_KEY_NAME }} \
            --security-group-ids ${{ secrets.AWS_SECURITY_GROUP_IDS }} --subnet-id ${{ secrets.AWS_SUBNET_ID }} \
            > run-instances-output.json

      - name: Get instance id
        id: instance_id
        run: |
          echo ::set-output name=instance_id::$(grep -oP '(?<="InstanceId": ")[^"]*' run-instances-output.json | head -1)

      - name: Wait until instance ready
        run: aws ec2 wait instance-status-ok --instance-ids ${{ steps.instance_id.outputs.instance_id }}

      - name: Get public DNS name
        id: public_dns_name
        run: |
          aws ec2 describe-instances --instance-ids ${{ steps.instance_id.outputs.instance_id }} > describe-instances-output.json
          echo ::set-output name=public_dns_name::$(grep -oP '(?<="PublicDnsName": ")[^"]*' describe-instances-output.json | head -1)

      - name: Mount NVMe drive
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.public_dns_name.outputs.public_dns_name }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo mkfs -t xfs /dev/nvme1n1
            sudo mount /dev/nvme1n1 /mnt

      - name: Install docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.public_dns_name.outputs.public_dns_name }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo yum update -y
            sudo amazon-linux-extras install docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user

      - name: Configure AWS CLI on instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.public_dns_name.outputs.public_dns_name }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region  ${{ secrets.AWS_REGION }}

      - name: Run planetiler on Switzerland, copy to S3
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.public_dns_name.outputs.public_dns_name }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd /mnt
            docker run \
              --memory=120g \
              -e \
              JAVA_TOOL_OPTIONS="-Xmx100g -Xms100g" \
              -v "$(pwd)/data":/data \
              ghcr.io/onthegomap/planetiler:latest \
              --download \
              --download-threads=10 \
              --download-chunk-size-mb=1000 \
              --nodemap-type=sparsearray \
              --nodemap-storage=ram \
              --area=switzerland
            aws s3 cp /mnt/data/output.mbtiles s3://planetiler/switzerland.mbtiles

      - name: Run planetiler on planet, copy to S3
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.public_dns_name.outputs.public_dns_name }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          command_timeout: 240m
          script_stop: true
          script: |
            cd /mnt
            sudo rm data/output.mbtiles
            docker run \
              --memory=120g \
              -e \
              JAVA_TOOL_OPTIONS="-Xmx100g -Xms100g" \
              -v "$(pwd)/data":/data \
              ghcr.io/onthegomap/planetiler:latest \
              --download \
              --download-threads=10 \
              --download-chunk-size-mb=1000 \
              --nodemap-type=sparsearray \
              --nodemap-storage=ram \
              --area=planet \
              --bounds=world
            aws s3 cp /mnt/data/output.mbtiles s3://planetiler/planet.mbtiles
